
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002194  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080022a0  080022a0  000122a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a4  080023a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023a4  080023a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023a4  080023a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023a4  080023a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023a8  080023a8  000123a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  080023b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080023b8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000854a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000185f  00000000  00000000  000285c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  00029e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000077a  00000000  00000000  0002a7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017179  00000000  00000000  0002af5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aabd  00000000  00000000  000420d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087390  00000000  00000000  0004cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027bc  00000000  00000000  000d3f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d66dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002288 	.word	0x08002288

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002288 	.word	0x08002288

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <initLED8x8>:
void initLED8x8(struct led8x8 *led, GPIO_TypeDef *gpio_col, uint16_t pin_c0,
		uint16_t pin_c1, uint16_t pin_c2, uint16_t pin_c3, uint16_t pin_c4,
		uint16_t pin_c5, uint16_t pin_c6, uint16_t pin_c7,
		GPIO_TypeDef *gpio_row, uint16_t pin_r0, uint16_t pin_r1,
		uint16_t pin_r2, uint16_t pin_r3, uint16_t pin_r4, uint16_t pin_r5,
		uint16_t pin_r6, uint16_t pin_r7, char *str) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	4611      	mov	r1, r2
 8000168:	461a      	mov	r2, r3
 800016a:	460b      	mov	r3, r1
 800016c:	80fb      	strh	r3, [r7, #6]
 800016e:	4613      	mov	r3, r2
 8000170:	80bb      	strh	r3, [r7, #4]
	led->gpio_col = gpio_col;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	68ba      	ldr	r2, [r7, #8]
 8000176:	601a      	str	r2, [r3, #0]
	led->gpio_row = gpio_row;
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800017c:	615a      	str	r2, [r3, #20]
	led->pin_c0 = pin_c0;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	88fa      	ldrh	r2, [r7, #6]
 8000182:	809a      	strh	r2, [r3, #4]
	led->pin_c1 = pin_c1;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	88ba      	ldrh	r2, [r7, #4]
 8000188:	80da      	strh	r2, [r3, #6]
	led->pin_c2 = pin_c2;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	8c3a      	ldrh	r2, [r7, #32]
 800018e:	811a      	strh	r2, [r3, #8]
	led->pin_c3 = pin_c3;
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000194:	815a      	strh	r2, [r3, #10]
	led->pin_c4 = pin_c4;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800019a:	819a      	strh	r2, [r3, #12]
	led->pin_c5 = pin_c5;
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80001a0:	81da      	strh	r2, [r3, #14]
	led->pin_c6 = pin_c6;
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80001a6:	821a      	strh	r2, [r3, #16]
	led->pin_c7 = pin_c7;
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80001ac:	825a      	strh	r2, [r3, #18]
	led->pin_r0 = pin_r0;
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80001b2:	831a      	strh	r2, [r3, #24]
	led->pin_r1 = pin_r1;
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80001ba:	835a      	strh	r2, [r3, #26]
	led->pin_r2 = pin_r2;
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80001c2:	839a      	strh	r2, [r3, #28]
	led->pin_r3 = pin_r3;
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80001ca:	83da      	strh	r2, [r3, #30]
	led->pin_r4 = pin_r4;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80001d2:	841a      	strh	r2, [r3, #32]
	led->pin_r5 = pin_r5;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80001da:	845a      	strh	r2, [r3, #34]	; 0x22
	led->pin_r6 = pin_r6;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80001e2:	849a      	strh	r2, [r3, #36]	; 0x24
	led->pin_r7 = pin_r7;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80001ea:	84da      	strh	r2, [r3, #38]	; 0x26
	led->index = 0;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	2200      	movs	r2, #0
 80001f0:	639a      	str	r2, [r3, #56]	; 0x38
	led->flat_update_nex_buf = 1;
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	2201      	movs	r2, #1
 80001f6:	879a      	strh	r2, [r3, #60]	; 0x3c
	led->is_reset = 0;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	2200      	movs	r2, #0
 80001fc:	87da      	strh	r2, [r3, #62]	; 0x3e
	unsigned len = strlen(str);
 80001fe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000200:	f7ff ffa4 	bl	800014c <strlen>
 8000204:	6138      	str	r0, [r7, #16]
	if (len > 0) {
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d01d      	beq.n	8000248 <initLED8x8+0xec>
		memcpy(led->cur_buffer, chu_cai + (str[led->index++] - 65) * 8,
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000216:	1c59      	adds	r1, r3, #1
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	6391      	str	r1, [r2, #56]	; 0x38
 800021c:	461a      	mov	r2, r3
 800021e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000220:	4413      	add	r3, r2
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	3b41      	subs	r3, #65	; 0x41
 8000226:	00db      	lsls	r3, r3, #3
 8000228:	461a      	mov	r2, r3
 800022a:	4b25      	ldr	r3, [pc, #148]	; (80002c0 <initLED8x8+0x164>)
 800022c:	4413      	add	r3, r2
 800022e:	2208      	movs	r2, #8
 8000230:	4619      	mov	r1, r3
 8000232:	f002 f81b 	bl	800226c <memcpy>
				sizeof(led->cur_buffer));
		if (led->index >= len)
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800023a:	461a      	mov	r2, r3
 800023c:	693b      	ldr	r3, [r7, #16]
 800023e:	4293      	cmp	r3, r2
 8000240:	d802      	bhi.n	8000248 <initLED8x8+0xec>
			led->index = 0;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2200      	movs	r2, #0
 8000246:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (len > 1) {
 8000248:	693b      	ldr	r3, [r7, #16]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d933      	bls.n	80002b6 <initLED8x8+0x15a>
		memcpy(led->nex_buffer, chu_cai + (str[led->index++] - 65) * 8,
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000258:	1c59      	adds	r1, r3, #1
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	6391      	str	r1, [r2, #56]	; 0x38
 800025e:	461a      	mov	r2, r3
 8000260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000262:	4413      	add	r3, r2
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	3b41      	subs	r3, #65	; 0x41
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	461a      	mov	r2, r3
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <initLED8x8+0x164>)
 800026e:	4413      	add	r3, r2
 8000270:	2208      	movs	r2, #8
 8000272:	4619      	mov	r1, r3
 8000274:	f001 fffa 	bl	800226c <memcpy>
				sizeof(led->nex_buffer));
		if (led->index >= len)
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800027c:	461a      	mov	r2, r3
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	4293      	cmp	r3, r2
 8000282:	d802      	bhi.n	800028a <initLED8x8+0x12e>
			led->index = 0;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	2200      	movs	r2, #0
 8000288:	639a      	str	r2, [r3, #56]	; 0x38
		for (int i = 0; i < 8; i++)
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	e00f      	b.n	80002b0 <initLED8x8+0x154>
			led->nex_buffer[i] <<= 1;
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	4413      	add	r3, r2
 8000296:	3330      	adds	r3, #48	; 0x30
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	b2d9      	uxtb	r1, r3
 800029e:	68fa      	ldr	r2, [r7, #12]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	4413      	add	r3, r2
 80002a4:	3330      	adds	r3, #48	; 0x30
 80002a6:	460a      	mov	r2, r1
 80002a8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3301      	adds	r3, #1
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	ddec      	ble.n	8000290 <initLED8x8+0x134>
	}

}
 80002b6:	bf00      	nop
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	080022b0 	.word	0x080022b0

080002c4 <shift_once>:
void shift_once(struct led8x8 *led, unsigned int str_len, char c) {
 80002c4:	b480      	push	{r7}
 80002c6:	b087      	sub	sp, #28
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	4613      	mov	r3, r2
 80002d0:	71fb      	strb	r3, [r7, #7]
	if (c == ' ' || led->is_reset == 2) {
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2b20      	cmp	r3, #32
 80002d6:	d003      	beq.n	80002e0 <shift_once+0x1c>
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80002dc:	2b02      	cmp	r3, #2
 80002de:	d107      	bne.n	80002f0 <shift_once+0x2c>
		led->shift_for_space++;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80002e6:	3301      	adds	r3, #1
 80002e8:	b29a      	uxth	r2, r3
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
	for (int i = 0; i < 8; i++) {
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	e044      	b.n	8000380 <shift_once+0xbc>
		led->cur_buffer[i] = (led->cur_buffer[i] << 1);
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	4413      	add	r3, r2
 80002fc:	3328      	adds	r3, #40	; 0x28
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	b2d9      	uxtb	r1, r3
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	4413      	add	r3, r2
 800030a:	3328      	adds	r3, #40	; 0x28
 800030c:	460a      	mov	r2, r1
 800030e:	701a      	strb	r2, [r3, #0]
		if (0 < led->shift_for_space && led->shift_for_space < 5) {
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000316:	2b00      	cmp	r3, #0
 8000318:	d004      	beq.n	8000324 <shift_once+0x60>
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000320:	2b04      	cmp	r3, #4
 8000322:	d920      	bls.n	8000366 <shift_once+0xa2>
		} else {
			led->cur_buffer[i] = led->cur_buffer[i] | (led->nex_buffer[i] >> 7);
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	4413      	add	r3, r2
 800032a:	3328      	adds	r3, #40	; 0x28
 800032c:	781a      	ldrb	r2, [r3, #0]
 800032e:	68f9      	ldr	r1, [r7, #12]
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	440b      	add	r3, r1
 8000334:	3330      	adds	r3, #48	; 0x30
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	09db      	lsrs	r3, r3, #7
 800033a:	b2db      	uxtb	r3, r3
 800033c:	4313      	orrs	r3, r2
 800033e:	b2d9      	uxtb	r1, r3
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	4413      	add	r3, r2
 8000346:	3328      	adds	r3, #40	; 0x28
 8000348:	460a      	mov	r2, r1
 800034a:	701a      	strb	r2, [r3, #0]
			led->nex_buffer[i] <<= 1;
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	4413      	add	r3, r2
 8000352:	3330      	adds	r3, #48	; 0x30
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	b2d9      	uxtb	r1, r3
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	4413      	add	r3, r2
 8000360:	3330      	adds	r3, #48	; 0x30
 8000362:	460a      	mov	r2, r1
 8000364:	701a      	strb	r2, [r3, #0]
		}
		if (led->nex_buffer[i] != 0) {
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	4413      	add	r3, r2
 800036c:	3330      	adds	r3, #48	; 0x30
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d002      	beq.n	800037a <shift_once+0xb6>
			led->flat_update_nex_buf = 0;
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	2200      	movs	r2, #0
 8000378:	879a      	strh	r2, [r3, #60]	; 0x3c
	for (int i = 0; i < 8; i++) {
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	3301      	adds	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	2b07      	cmp	r3, #7
 8000384:	ddb7      	ble.n	80002f6 <shift_once+0x32>
		}
	}

}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	371c      	adds	r7, #28
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
	...

08000394 <scrollLED8x8>:
void scrollLED8x8(struct led8x8 *led, char *str) {
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
	shift_once(led, strlen(str), str[(led->index > 1) ? led->index - 2 : 0]);
 800039e:	6838      	ldr	r0, [r7, #0]
 80003a0:	f7ff fed4 	bl	800014c <strlen>
 80003a4:	4601      	mov	r1, r0
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	dd04      	ble.n	80003b8 <scrollLED8x8+0x24>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003b2:	3b02      	subs	r3, #2
 80003b4:	461a      	mov	r2, r3
 80003b6:	e000      	b.n	80003ba <scrollLED8x8+0x26>
 80003b8:	2200      	movs	r2, #0
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	4413      	add	r3, r2
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f7ff ff7e 	bl	80002c4 <shift_once>
	if (led->flat_update_nex_buf) {
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d053      	beq.n	8000478 <scrollLED8x8+0xe4>
		while(str[led->index]<'A'||str[led->index]>'Z')led->index++;
 80003d0:	e004      	b.n	80003dc <scrollLED8x8+0x48>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003d6:	1c5a      	adds	r2, r3, #1
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	639a      	str	r2, [r3, #56]	; 0x38
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003e0:	461a      	mov	r2, r3
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	4413      	add	r3, r2
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b40      	cmp	r3, #64	; 0x40
 80003ea:	d9f2      	bls.n	80003d2 <scrollLED8x8+0x3e>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003f0:	461a      	mov	r2, r3
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	4413      	add	r3, r2
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b5a      	cmp	r3, #90	; 0x5a
 80003fa:	d8ea      	bhi.n	80003d2 <scrollLED8x8+0x3e>
		memcpy(led->nex_buffer, chu_cai + (str[led->index++] - 65) * 8,
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000406:	1c59      	adds	r1, r3, #1
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	6391      	str	r1, [r2, #56]	; 0x38
 800040c:	461a      	mov	r2, r3
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	4413      	add	r3, r2
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	3b41      	subs	r3, #65	; 0x41
 8000416:	00db      	lsls	r3, r3, #3
 8000418:	461a      	mov	r2, r3
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <scrollLED8x8+0xf4>)
 800041c:	4413      	add	r3, r2
 800041e:	2208      	movs	r2, #8
 8000420:	4619      	mov	r1, r3
 8000422:	f001 ff23 	bl	800226c <memcpy>
				sizeof(led->nex_buffer));
		if (led->index >= strlen(str)){
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800042a:	461c      	mov	r4, r3
 800042c:	6838      	ldr	r0, [r7, #0]
 800042e:	f7ff fe8d 	bl	800014c <strlen>
 8000432:	4603      	mov	r3, r0
 8000434:	429c      	cmp	r4, r3
 8000436:	d305      	bcc.n	8000444 <scrollLED8x8+0xb0>
			led->is_reset = 1;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	87da      	strh	r2, [r3, #62]	; 0x3e
			led->index = 0;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2200      	movs	r2, #0
 8000442:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(led->index == 1 && led->is_reset == 1)led->is_reset = 2;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000448:	2b01      	cmp	r3, #1
 800044a:	d106      	bne.n	800045a <scrollLED8x8+0xc6>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000450:	2b01      	cmp	r3, #1
 8000452:	d102      	bne.n	800045a <scrollLED8x8+0xc6>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2202      	movs	r2, #2
 8000458:	87da      	strh	r2, [r3, #62]	; 0x3e
		if(led->index != 1 && led->is_reset == 2)led->is_reset = 0;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800045e:	2b01      	cmp	r3, #1
 8000460:	d006      	beq.n	8000470 <scrollLED8x8+0xdc>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000466:	2b02      	cmp	r3, #2
 8000468:	d102      	bne.n	8000470 <scrollLED8x8+0xdc>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2200      	movs	r2, #0
 800046e:	87da      	strh	r2, [r3, #62]	; 0x3e

		led->shift_for_space = 0;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2200      	movs	r2, #0
 8000474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
	led->flat_update_nex_buf = 1;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	bd90      	pop	{r4, r7, pc}
 8000486:	bf00      	nop
 8000488:	080022b0 	.word	0x080022b0

0800048c <OffAllLed>:
void OffAllLed(struct led8x8 *led) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uint16_t pin = led->pin_r0 | led->pin_r1 | led->pin_r2 | led->pin_r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	8b1a      	ldrh	r2, [r3, #24]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	8b5b      	ldrh	r3, [r3, #26]
 800049c:	4313      	orrs	r3, r2
 800049e:	b29a      	uxth	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	8b9b      	ldrh	r3, [r3, #28]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	8bdb      	ldrh	r3, [r3, #30]
 80004ac:	4313      	orrs	r3, r2
 80004ae:	b29a      	uxth	r2, r3
			| led->pin_r4 | led->pin_r5 | led->pin_r6 | led->pin_r7;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	8c1b      	ldrh	r3, [r3, #32]
	uint16_t pin = led->pin_r0 | led->pin_r1 | led->pin_r2 | led->pin_r3
 80004b4:	4313      	orrs	r3, r2
 80004b6:	b29a      	uxth	r2, r3
			| led->pin_r4 | led->pin_r5 | led->pin_r6 | led->pin_r7;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
	uint16_t pin = led->pin_r0 | led->pin_r1 | led->pin_r2 | led->pin_r3
 80004bc:	4313      	orrs	r3, r2
 80004be:	b29a      	uxth	r2, r3
			| led->pin_r4 | led->pin_r5 | led->pin_r6 | led->pin_r7;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	uint16_t pin = led->pin_r0 | led->pin_r1 | led->pin_r2 | led->pin_r3
 80004c4:	4313      	orrs	r3, r2
 80004c6:	b29a      	uxth	r2, r3
			| led->pin_r4 | led->pin_r5 | led->pin_r6 | led->pin_r7;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
	uint16_t pin = led->pin_r0 | led->pin_r1 | led->pin_r2 | led->pin_r3
 80004cc:	4313      	orrs	r3, r2
 80004ce:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(led->gpio_row, pin, 0);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	89f9      	ldrh	r1, [r7, #14]
 80004d6:	2200      	movs	r2, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fea7 	bl	800122c <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <OnColunm>:
void OnColunm(struct led8x8 *led, uint8_t buffer) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	70fb      	strb	r3, [r7, #3]
	uint8_t mask = 0x01; // 0000 0001
 80004f4:	2301      	movs	r3, #1
 80004f6:	72fb      	strb	r3, [r7, #11]
	for (int i = 7; i >= 0; i--) {
 80004f8:	2307      	movs	r3, #7
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	e0a6      	b.n	800064c <OnColunm+0x164>
		switch (i) {
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	2b06      	cmp	r3, #6
 8000502:	f200 808f 	bhi.w	8000624 <OnColunm+0x13c>
 8000506:	a201      	add	r2, pc, #4	; (adr r2, 800050c <OnColunm+0x24>)
 8000508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050c:	08000529 	.word	0x08000529
 8000510:	0800054d 	.word	0x0800054d
 8000514:	08000571 	.word	0x08000571
 8000518:	08000595 	.word	0x08000595
 800051c:	080005b9 	.word	0x080005b9
 8000520:	080005dd 	.word	0x080005dd
 8000524:	08000601 	.word	0x08000601
		case 0:
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c7,
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	8a59      	ldrh	r1, [r3, #18]
					!!(mask << i & buffer));
 8000530:	7afa      	ldrb	r2, [r7, #11]
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	409a      	lsls	r2, r3
 8000536:	78fb      	ldrb	r3, [r7, #3]
 8000538:	4013      	ands	r3, r2
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c7,
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf14      	ite	ne
 800053e:	2301      	movne	r3, #1
 8000540:	2300      	moveq	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	f000 fe71 	bl	800122c <HAL_GPIO_WritePin>
			break;
 800054a:	e07c      	b.n	8000646 <OnColunm+0x15e>
		case 1:
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c6,
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6818      	ldr	r0, [r3, #0]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	8a19      	ldrh	r1, [r3, #16]
					!!(mask << i & buffer));
 8000554:	7afa      	ldrb	r2, [r7, #11]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	409a      	lsls	r2, r3
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	4013      	ands	r3, r2
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c6,
 800055e:	2b00      	cmp	r3, #0
 8000560:	bf14      	ite	ne
 8000562:	2301      	movne	r3, #1
 8000564:	2300      	moveq	r3, #0
 8000566:	b2db      	uxtb	r3, r3
 8000568:	461a      	mov	r2, r3
 800056a:	f000 fe5f 	bl	800122c <HAL_GPIO_WritePin>
			break;
 800056e:	e06a      	b.n	8000646 <OnColunm+0x15e>
		case 2:
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c5,
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6818      	ldr	r0, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	89d9      	ldrh	r1, [r3, #14]
					!!(mask << i & buffer));
 8000578:	7afa      	ldrb	r2, [r7, #11]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	409a      	lsls	r2, r3
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	4013      	ands	r3, r2
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c5,
 8000582:	2b00      	cmp	r3, #0
 8000584:	bf14      	ite	ne
 8000586:	2301      	movne	r3, #1
 8000588:	2300      	moveq	r3, #0
 800058a:	b2db      	uxtb	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	f000 fe4d 	bl	800122c <HAL_GPIO_WritePin>
			break;
 8000592:	e058      	b.n	8000646 <OnColunm+0x15e>
		case 3:
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c4,
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	8999      	ldrh	r1, [r3, #12]
					!!(mask << i & buffer));
 800059c:	7afa      	ldrb	r2, [r7, #11]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	409a      	lsls	r2, r3
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	4013      	ands	r3, r2
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c4,
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	bf14      	ite	ne
 80005aa:	2301      	movne	r3, #1
 80005ac:	2300      	moveq	r3, #0
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	461a      	mov	r2, r3
 80005b2:	f000 fe3b 	bl	800122c <HAL_GPIO_WritePin>
			break;
 80005b6:	e046      	b.n	8000646 <OnColunm+0x15e>
		case 4:
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c3,
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	8959      	ldrh	r1, [r3, #10]
					!!(mask << i & buffer));
 80005c0:	7afa      	ldrb	r2, [r7, #11]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	409a      	lsls	r2, r3
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	4013      	ands	r3, r2
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c3,
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	bf14      	ite	ne
 80005ce:	2301      	movne	r3, #1
 80005d0:	2300      	moveq	r3, #0
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	461a      	mov	r2, r3
 80005d6:	f000 fe29 	bl	800122c <HAL_GPIO_WritePin>
			break;
 80005da:	e034      	b.n	8000646 <OnColunm+0x15e>
		case 5:
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c2,
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6818      	ldr	r0, [r3, #0]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	8919      	ldrh	r1, [r3, #8]
					!!(mask << i & buffer));
 80005e4:	7afa      	ldrb	r2, [r7, #11]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	409a      	lsls	r2, r3
 80005ea:	78fb      	ldrb	r3, [r7, #3]
 80005ec:	4013      	ands	r3, r2
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c2,
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	bf14      	ite	ne
 80005f2:	2301      	movne	r3, #1
 80005f4:	2300      	moveq	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	f000 fe17 	bl	800122c <HAL_GPIO_WritePin>
			break;
 80005fe:	e022      	b.n	8000646 <OnColunm+0x15e>
		case 6:
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c1,
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	88d9      	ldrh	r1, [r3, #6]
					!!(mask << i & buffer));
 8000608:	7afa      	ldrb	r2, [r7, #11]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	409a      	lsls	r2, r3
 800060e:	78fb      	ldrb	r3, [r7, #3]
 8000610:	4013      	ands	r3, r2
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c1,
 8000612:	2b00      	cmp	r3, #0
 8000614:	bf14      	ite	ne
 8000616:	2301      	movne	r3, #1
 8000618:	2300      	moveq	r3, #0
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	f000 fe05 	bl	800122c <HAL_GPIO_WritePin>
			break;
 8000622:	e010      	b.n	8000646 <OnColunm+0x15e>
		default:
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c0,
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	8899      	ldrh	r1, [r3, #4]
					!!(mask << i & buffer));
 800062c:	7afa      	ldrb	r2, [r7, #11]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	409a      	lsls	r2, r3
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	4013      	ands	r3, r2
			HAL_GPIO_WritePin(led->gpio_col, led->pin_c0,
 8000636:	2b00      	cmp	r3, #0
 8000638:	bf14      	ite	ne
 800063a:	2301      	movne	r3, #1
 800063c:	2300      	moveq	r3, #0
 800063e:	b2db      	uxtb	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	f000 fdf3 	bl	800122c <HAL_GPIO_WritePin>
	for (int i = 7; i >= 0; i--) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3b01      	subs	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	f6bf af55 	bge.w	80004fe <OnColunm+0x16>
		}
	}
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop

08000660 <updateLED8x8>:
void updateLED8x8(struct led8x8 *led, uint8_t index) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
	OffAllLed(led);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff0d 	bl	800048c <OffAllLed>
	switch (index) {
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	2b07      	cmp	r3, #7
 8000676:	f200 80a3 	bhi.w	80007c0 <updateLED8x8+0x160>
 800067a:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <updateLED8x8+0x20>)
 800067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000680:	080006a1 	.word	0x080006a1
 8000684:	080006c5 	.word	0x080006c5
 8000688:	080006e9 	.word	0x080006e9
 800068c:	0800070d 	.word	0x0800070d
 8000690:	08000731 	.word	0x08000731
 8000694:	08000755 	.word	0x08000755
 8000698:	08000779 	.word	0x08000779
 800069c:	0800079d 	.word	0x0800079d
	case 0:
		HAL_GPIO_WritePin(led->gpio_row, led->pin_r0, 1);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6958      	ldr	r0, [r3, #20]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	8b1b      	ldrh	r3, [r3, #24]
 80006a8:	2201      	movs	r2, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	f000 fdbe 	bl	800122c <HAL_GPIO_WritePin>
		OnColunm(led, led->cur_buffer[index]);
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80006ba:	4619      	mov	r1, r3
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff13 	bl	80004e8 <OnColunm>
		break;
 80006c2:	e07e      	b.n	80007c2 <updateLED8x8+0x162>
	case 1:
		HAL_GPIO_WritePin(led->gpio_row, led->pin_r1, 1);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6958      	ldr	r0, [r3, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	8b5b      	ldrh	r3, [r3, #26]
 80006cc:	2201      	movs	r2, #1
 80006ce:	4619      	mov	r1, r3
 80006d0:	f000 fdac 	bl	800122c <HAL_GPIO_WritePin>
		OnColunm(led, led->cur_buffer[index]);
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80006de:	4619      	mov	r1, r3
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff01 	bl	80004e8 <OnColunm>
		break;
 80006e6:	e06c      	b.n	80007c2 <updateLED8x8+0x162>
	case 2:
		HAL_GPIO_WritePin(led->gpio_row, led->pin_r2, 1);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6958      	ldr	r0, [r3, #20]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	8b9b      	ldrh	r3, [r3, #28]
 80006f0:	2201      	movs	r2, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	f000 fd9a 	bl	800122c <HAL_GPIO_WritePin>
		OnColunm(led, led->cur_buffer[index]);
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000702:	4619      	mov	r1, r3
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff feef 	bl	80004e8 <OnColunm>
		break;
 800070a:	e05a      	b.n	80007c2 <updateLED8x8+0x162>
	case 3:
		HAL_GPIO_WritePin(led->gpio_row, led->pin_r3, 1);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6958      	ldr	r0, [r3, #20]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	8bdb      	ldrh	r3, [r3, #30]
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	f000 fd88 	bl	800122c <HAL_GPIO_WritePin>
		OnColunm(led, led->cur_buffer[index]);
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000726:	4619      	mov	r1, r3
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff fedd 	bl	80004e8 <OnColunm>
		break;
 800072e:	e048      	b.n	80007c2 <updateLED8x8+0x162>
	case 4:
		HAL_GPIO_WritePin(led->gpio_row, led->pin_r4, 1);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6958      	ldr	r0, [r3, #20]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8c1b      	ldrh	r3, [r3, #32]
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	f000 fd76 	bl	800122c <HAL_GPIO_WritePin>
		OnColunm(led, led->cur_buffer[index]);
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800074a:	4619      	mov	r1, r3
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff fecb 	bl	80004e8 <OnColunm>
		break;
 8000752:	e036      	b.n	80007c2 <updateLED8x8+0x162>
	case 5:
		HAL_GPIO_WritePin(led->gpio_row, led->pin_r5, 1);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6958      	ldr	r0, [r3, #20]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800075c:	2201      	movs	r2, #1
 800075e:	4619      	mov	r1, r3
 8000760:	f000 fd64 	bl	800122c <HAL_GPIO_WritePin>
		OnColunm(led, led->cur_buffer[index]);
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800076e:	4619      	mov	r1, r3
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff feb9 	bl	80004e8 <OnColunm>
		break;
 8000776:	e024      	b.n	80007c2 <updateLED8x8+0x162>
	case 6:
		HAL_GPIO_WritePin(led->gpio_row, led->pin_r6, 1);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6958      	ldr	r0, [r3, #20]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	f000 fd52 	bl	800122c <HAL_GPIO_WritePin>
		OnColunm(led, led->cur_buffer[index]);
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000792:	4619      	mov	r1, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff fea7 	bl	80004e8 <OnColunm>
		break;
 800079a:	e012      	b.n	80007c2 <updateLED8x8+0x162>
	case 7:
		HAL_GPIO_WritePin(led->gpio_row, led->pin_r7, 1);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6958      	ldr	r0, [r3, #20]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007a4:	2201      	movs	r2, #1
 80007a6:	4619      	mov	r1, r3
 80007a8:	f000 fd40 	bl	800122c <HAL_GPIO_WritePin>
		OnColunm(led, led->cur_buffer[index]);
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80007b6:	4619      	mov	r1, r3
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff fe95 	bl	80004e8 <OnColunm>
		break;
 80007be:	e000      	b.n	80007c2 <updateLED8x8+0x162>
	default:
		break;
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop

080007cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b0a4      	sub	sp, #144	; 0x90
 80007d0:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007d2:	f000 fa37 	bl	8000c44 <HAL_Init>

	/* USER CODE BEGIN Init */
	uint8_t count = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	struct led8x8 m_led;
	int index1 = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
	char *str = "TO HOANG PHONG";
 80007e0:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <main+0xe8>)
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
	initLED8x8(&m_led, GPIOA, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_10,
 80007e4:	4638      	mov	r0, r7
 80007e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80007ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ee:	930e      	str	r3, [sp, #56]	; 0x38
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	930d      	str	r3, [sp, #52]	; 0x34
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	930c      	str	r3, [sp, #48]	; 0x30
 80007fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000800:	930b      	str	r3, [sp, #44]	; 0x2c
 8000802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000806:	930a      	str	r3, [sp, #40]	; 0x28
 8000808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800080c:	9309      	str	r3, [sp, #36]	; 0x24
 800080e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000812:	9308      	str	r3, [sp, #32]
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	9307      	str	r3, [sp, #28]
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <main+0xec>)
 800081a:	9306      	str	r3, [sp, #24]
 800081c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000820:	9305      	str	r3, [sp, #20]
 8000822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000826:	9304      	str	r3, [sp, #16]
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	9303      	str	r3, [sp, #12]
 800082e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	2308      	movs	r3, #8
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2304      	movs	r3, #4
 8000840:	2202      	movs	r2, #2
 8000842:	491e      	ldr	r1, [pc, #120]	; (80008bc <main+0xf0>)
 8000844:	f7ff fc8a 	bl	800015c <initLED8x8>
	GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14,str);

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000848:	f000 f83e 	bl	80008c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800084c:	f000 f8c4 	bl	80009d8 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000850:	f000 f876 	bl	8000940 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000854:	481a      	ldr	r0, [pc, #104]	; (80008c0 <main+0xf4>)
 8000856:	f001 f92f 	bl	8001ab8 <HAL_TIM_Base_Start_IT>
	set_timer(&timer, TIME);
 800085a:	2101      	movs	r1, #1
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <main+0xf8>)
 800085e:	f000 f924 	bl	8000aaa <set_timer>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (count > 20) {
 8000862:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000866:	2b14      	cmp	r3, #20
 8000868:	d907      	bls.n	800087a <main+0xae>
			scrollLED8x8(&m_led,str);
 800086a:	463b      	mov	r3, r7
 800086c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fd90 	bl	8000394 <scrollLED8x8>
			count = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		}
		if (!timer.st) {
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <main+0xf8>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1ef      	bne.n	8000862 <main+0x96>
			updateLED8x8(&m_led, index1++);
 8000882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	64ba      	str	r2, [r7, #72]	; 0x48
 8000888:	b2da      	uxtb	r2, r3
 800088a:	463b      	mov	r3, r7
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fee6 	bl	8000660 <updateLED8x8>
			if (index1 > 7) {
 8000894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000896:	2b07      	cmp	r3, #7
 8000898:	dd01      	ble.n	800089e <main+0xd2>
				index1 = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			count++;
 800089e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008a2:	3301      	adds	r3, #1
 80008a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			set_timer(&timer, TIME);
 80008a8:	2101      	movs	r1, #1
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <main+0xf8>)
 80008ac:	f000 f8fd 	bl	8000aaa <set_timer>
		if (count > 20) {
 80008b0:	e7d7      	b.n	8000862 <main+0x96>
 80008b2:	bf00      	nop
 80008b4:	080022a0 	.word	0x080022a0
 80008b8:	40010c00 	.word	0x40010c00
 80008bc:	40010800 	.word	0x40010800
 80008c0:	20000028 	.word	0x20000028
 80008c4:	20000070 	.word	0x20000070

080008c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b090      	sub	sp, #64	; 0x40
 80008cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	2228      	movs	r2, #40	; 0x28
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fc9c 	bl	8002214 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ee:	2301      	movs	r3, #1
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f2:	2310      	movs	r3, #16
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fcac 	bl	800125c <HAL_RCC_OscConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x46>
		Error_Handler();
 800090a:	f000 f8c9 	bl	8000aa0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800090e:	230f      	movs	r3, #15
 8000910:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f000 ff1a 	bl	8001760 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x6e>
		Error_Handler();
 8000932:	f000 f8b5 	bl	8000aa0 <Error_Handler>
	}
}
 8000936:	bf00      	nop
 8000938:	3740      	adds	r7, #64	; 0x40
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000954:	463b      	mov	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM2_Init+0x94>)
 800095e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000962:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 799;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_TIM2_Init+0x94>)
 8000966:	f240 321f 	movw	r2, #799	; 0x31f
 800096a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_TIM2_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 99;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_TIM2_Init+0x94>)
 8000974:	2263      	movs	r2, #99	; 0x63
 8000976:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_TIM2_Init+0x94>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_TIM2_Init+0x94>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <MX_TIM2_Init+0x94>)
 8000986:	f001 f847 	bl	8001a18 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000990:	f000 f886 	bl	8000aa0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_TIM2_Init+0x94>)
 80009a2:	f001 f9e3 	bl	8001d6c <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x70>
		Error_Handler();
 80009ac:	f000 f878 	bl	8000aa0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_TIM2_Init+0x94>)
 80009be:	f001 fbb9 	bl	8002134 <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80009c8:	f000 f86a 	bl	8000aa0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000028 	.word	0x20000028

080009d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_GPIO_Init+0xa0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <MX_GPIO_Init+0xa0>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_GPIO_Init+0xa0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_GPIO_Init+0xa0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_GPIO_Init+0xa0>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_GPIO_Init+0xa0>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8000a22:	4816      	ldr	r0, [pc, #88]	; (8000a7c <MX_GPIO_Init+0xa4>)
 8000a24:	f000 fc02 	bl	800122c <HAL_GPIO_WritePin>
					| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
					| GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
					| GPIO_PIN_14, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <MX_GPIO_Init+0xa8>)
 8000a30:	f000 fbfc 	bl	800122c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4
	 PA5 PA6 PA7 PA8
	 PA9 PA10 PA11 PA12
	 PA13 PA14 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 8000a34:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8000a38:	60bb      	str	r3, [r7, #8]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
			| GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
			| GPIO_PIN_14;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2302      	movs	r3, #2
 8000a44:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_GPIO_Init+0xa4>)
 8000a4e:	f000 fa69 	bl	8000f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB11 PB12 PB13 PB14
	 PB3 PB4 PB5 PB6
	 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 8000a52:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000a56:	60bb      	str	r3, [r7, #8]
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_3
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_GPIO_Init+0xa8>)
 8000a6c:	f000 fa5a 	bl	8000f24 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	run_timer(&timer);
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000a8e:	f000 f81c 	bl	8000aca <run_timer>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000070 	.word	0x20000070

08000aa0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>

08000aaa <set_timer>:
 *  Created on: Sep 20, 2023
 *      Author: HP
 */

#include"software_timer.h"
void set_timer(struct s_timer *timer, const unsigned long time) {
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
	timer->time = time;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
	timer->st = 1;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <run_timer>:
void run_timer(struct s_timer *timer) {
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	if (timer->time > 0) {
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00b      	beq.n	8000af2 <run_timer+0x28>
		timer->time--;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	1e5a      	subs	r2, r3, #1
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	605a      	str	r2, [r3, #4]
		if (timer->time < 1) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <run_timer+0x28>
			timer->st = 0;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_MspInit+0x40>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <HAL_MspInit+0x40>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_MspInit+0x40>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_MspInit+0x40>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_MspInit+0x40>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_MspInit+0x40>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b50:	d113      	bne.n	8000b7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_TIM_Base_MspInit+0x44>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_TIM_Base_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	61d3      	str	r3, [r2, #28]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_TIM_Base_MspInit+0x44>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	201c      	movs	r0, #28
 8000b70:	f000 f9a1 	bl	8000eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b74:	201c      	movs	r0, #28
 8000b76:	f000 f9ba 	bl	8000eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 f87f 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TIM2_IRQHandler+0x10>)
 8000bde:	f000 ffbd 	bl	8001b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000028 	.word	0x20000028

08000bec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf8:	f7ff fff8 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bfe:	490c      	ldr	r1, [pc, #48]	; (8000c30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c14:	4c09      	ldr	r4, [pc, #36]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f001 faff 	bl	8002224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c26:	f7ff fdd1 	bl	80007cc <main>
  bx lr
 8000c2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c34:	080023ac 	.word	0x080023ac
  ldr r2, =_sbss
 8000c38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c3c:	2000007c 	.word	0x2000007c

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x28>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x28>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f923 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff ff4c 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40022000 	.word	0x40022000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f93b 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f903 	bl	8000eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_IncTick+0x20>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000078 	.word	0x20000078

08000cf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	20000078 	.word	0x20000078

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4906      	ldr	r1, [pc, #24]	; (8000da0 <__NVIC_EnableIRQ+0x34>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e6c:	d301      	bcc.n	8000e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00f      	b.n	8000e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <SysTick_Config+0x40>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f7ff ff90 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <SysTick_Config+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SysTick_Config+0x40>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff2d 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec8:	f7ff ff42 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff ff90 	bl	8000df8 <NVIC_EncodePriority>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5f 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff35 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffa2 	bl	8000e5c <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b08b      	sub	sp, #44	; 0x2c
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e169      	b.n	800120c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 8158 	bne.w	8001206 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	4a9a      	ldr	r2, [pc, #616]	; (80011c4 <HAL_GPIO_Init+0x2a0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d05e      	beq.n	800101e <HAL_GPIO_Init+0xfa>
 8000f60:	4a98      	ldr	r2, [pc, #608]	; (80011c4 <HAL_GPIO_Init+0x2a0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d875      	bhi.n	8001052 <HAL_GPIO_Init+0x12e>
 8000f66:	4a98      	ldr	r2, [pc, #608]	; (80011c8 <HAL_GPIO_Init+0x2a4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d058      	beq.n	800101e <HAL_GPIO_Init+0xfa>
 8000f6c:	4a96      	ldr	r2, [pc, #600]	; (80011c8 <HAL_GPIO_Init+0x2a4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d86f      	bhi.n	8001052 <HAL_GPIO_Init+0x12e>
 8000f72:	4a96      	ldr	r2, [pc, #600]	; (80011cc <HAL_GPIO_Init+0x2a8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d052      	beq.n	800101e <HAL_GPIO_Init+0xfa>
 8000f78:	4a94      	ldr	r2, [pc, #592]	; (80011cc <HAL_GPIO_Init+0x2a8>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d869      	bhi.n	8001052 <HAL_GPIO_Init+0x12e>
 8000f7e:	4a94      	ldr	r2, [pc, #592]	; (80011d0 <HAL_GPIO_Init+0x2ac>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d04c      	beq.n	800101e <HAL_GPIO_Init+0xfa>
 8000f84:	4a92      	ldr	r2, [pc, #584]	; (80011d0 <HAL_GPIO_Init+0x2ac>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d863      	bhi.n	8001052 <HAL_GPIO_Init+0x12e>
 8000f8a:	4a92      	ldr	r2, [pc, #584]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d046      	beq.n	800101e <HAL_GPIO_Init+0xfa>
 8000f90:	4a90      	ldr	r2, [pc, #576]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d85d      	bhi.n	8001052 <HAL_GPIO_Init+0x12e>
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	d82a      	bhi.n	8000ff0 <HAL_GPIO_Init+0xcc>
 8000f9a:	2b12      	cmp	r3, #18
 8000f9c:	d859      	bhi.n	8001052 <HAL_GPIO_Init+0x12e>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <HAL_GPIO_Init+0x80>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	0800101f 	.word	0x0800101f
 8000fa8:	08000ff9 	.word	0x08000ff9
 8000fac:	0800100b 	.word	0x0800100b
 8000fb0:	0800104d 	.word	0x0800104d
 8000fb4:	08001053 	.word	0x08001053
 8000fb8:	08001053 	.word	0x08001053
 8000fbc:	08001053 	.word	0x08001053
 8000fc0:	08001053 	.word	0x08001053
 8000fc4:	08001053 	.word	0x08001053
 8000fc8:	08001053 	.word	0x08001053
 8000fcc:	08001053 	.word	0x08001053
 8000fd0:	08001053 	.word	0x08001053
 8000fd4:	08001053 	.word	0x08001053
 8000fd8:	08001053 	.word	0x08001053
 8000fdc:	08001053 	.word	0x08001053
 8000fe0:	08001053 	.word	0x08001053
 8000fe4:	08001053 	.word	0x08001053
 8000fe8:	08001001 	.word	0x08001001
 8000fec:	08001015 	.word	0x08001015
 8000ff0:	4a79      	ldr	r2, [pc, #484]	; (80011d8 <HAL_GPIO_Init+0x2b4>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d013      	beq.n	800101e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ff6:	e02c      	b.n	8001052 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	623b      	str	r3, [r7, #32]
          break;
 8000ffe:	e029      	b.n	8001054 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	3304      	adds	r3, #4
 8001006:	623b      	str	r3, [r7, #32]
          break;
 8001008:	e024      	b.n	8001054 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	3308      	adds	r3, #8
 8001010:	623b      	str	r3, [r7, #32]
          break;
 8001012:	e01f      	b.n	8001054 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	330c      	adds	r3, #12
 800101a:	623b      	str	r3, [r7, #32]
          break;
 800101c:	e01a      	b.n	8001054 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001026:	2304      	movs	r3, #4
 8001028:	623b      	str	r3, [r7, #32]
          break;
 800102a:	e013      	b.n	8001054 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d105      	bne.n	8001040 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001034:	2308      	movs	r3, #8
 8001036:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	611a      	str	r2, [r3, #16]
          break;
 800103e:	e009      	b.n	8001054 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001040:	2308      	movs	r3, #8
 8001042:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	615a      	str	r2, [r3, #20]
          break;
 800104a:	e003      	b.n	8001054 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
          break;
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x130>
          break;
 8001052:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	2bff      	cmp	r3, #255	; 0xff
 8001058:	d801      	bhi.n	800105e <HAL_GPIO_Init+0x13a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	e001      	b.n	8001062 <HAL_GPIO_Init+0x13e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3304      	adds	r3, #4
 8001062:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	2bff      	cmp	r3, #255	; 0xff
 8001068:	d802      	bhi.n	8001070 <HAL_GPIO_Init+0x14c>
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	e002      	b.n	8001076 <HAL_GPIO_Init+0x152>
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	3b08      	subs	r3, #8
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	210f      	movs	r1, #15
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	401a      	ands	r2, r3
 8001088:	6a39      	ldr	r1, [r7, #32]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 80b1 	beq.w	8001206 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010a4:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a4c      	ldr	r2, [pc, #304]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b4a      	ldr	r3, [pc, #296]	; (80011dc <HAL_GPIO_Init+0x2b8>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010bc:	4a48      	ldr	r2, [pc, #288]	; (80011e0 <HAL_GPIO_Init+0x2bc>)
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a40      	ldr	r2, [pc, #256]	; (80011e4 <HAL_GPIO_Init+0x2c0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d013      	beq.n	8001110 <HAL_GPIO_Init+0x1ec>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a3f      	ldr	r2, [pc, #252]	; (80011e8 <HAL_GPIO_Init+0x2c4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d00d      	beq.n	800110c <HAL_GPIO_Init+0x1e8>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a3e      	ldr	r2, [pc, #248]	; (80011ec <HAL_GPIO_Init+0x2c8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d007      	beq.n	8001108 <HAL_GPIO_Init+0x1e4>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a3d      	ldr	r2, [pc, #244]	; (80011f0 <HAL_GPIO_Init+0x2cc>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d101      	bne.n	8001104 <HAL_GPIO_Init+0x1e0>
 8001100:	2303      	movs	r3, #3
 8001102:	e006      	b.n	8001112 <HAL_GPIO_Init+0x1ee>
 8001104:	2304      	movs	r3, #4
 8001106:	e004      	b.n	8001112 <HAL_GPIO_Init+0x1ee>
 8001108:	2302      	movs	r3, #2
 800110a:	e002      	b.n	8001112 <HAL_GPIO_Init+0x1ee>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <HAL_GPIO_Init+0x1ee>
 8001110:	2300      	movs	r3, #0
 8001112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001114:	f002 0203 	and.w	r2, r2, #3
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	4093      	lsls	r3, r2
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001122:	492f      	ldr	r1, [pc, #188]	; (80011e0 <HAL_GPIO_Init+0x2bc>)
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	492c      	ldr	r1, [pc, #176]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	608b      	str	r3, [r1, #8]
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	43db      	mvns	r3, r3
 8001152:	4928      	ldr	r1, [pc, #160]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 8001154:	4013      	ands	r3, r2
 8001156:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	4922      	ldr	r1, [pc, #136]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	60cb      	str	r3, [r1, #12]
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	43db      	mvns	r3, r3
 800117a:	491e      	ldr	r1, [pc, #120]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 800117c:	4013      	ands	r3, r2
 800117e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	4918      	ldr	r1, [pc, #96]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	4914      	ldr	r1, [pc, #80]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d021      	beq.n	80011f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	490e      	ldr	r1, [pc, #56]	; (80011f4 <HAL_GPIO_Init+0x2d0>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
 80011c0:	e021      	b.n	8001206 <HAL_GPIO_Init+0x2e2>
 80011c2:	bf00      	nop
 80011c4:	10320000 	.word	0x10320000
 80011c8:	10310000 	.word	0x10310000
 80011cc:	10220000 	.word	0x10220000
 80011d0:	10210000 	.word	0x10210000
 80011d4:	10120000 	.word	0x10120000
 80011d8:	10110000 	.word	0x10110000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010000 	.word	0x40010000
 80011e4:	40010800 	.word	0x40010800
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	40011000 	.word	0x40011000
 80011f0:	40011400 	.word	0x40011400
 80011f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_GPIO_Init+0x304>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	43db      	mvns	r3, r3
 8001200:	4909      	ldr	r1, [pc, #36]	; (8001228 <HAL_GPIO_Init+0x304>)
 8001202:	4013      	ands	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	3301      	adds	r3, #1
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	fa22 f303 	lsr.w	r3, r2, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	f47f ae8e 	bne.w	8000f38 <HAL_GPIO_Init+0x14>
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	372c      	adds	r7, #44	; 0x2c
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001248:	e003      	b.n	8001252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	041a      	lsls	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	611a      	str	r2, [r3, #16]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e272      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8087 	beq.w	800138a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800127c:	4b92      	ldr	r3, [pc, #584]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b04      	cmp	r3, #4
 8001286:	d00c      	beq.n	80012a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001288:	4b8f      	ldr	r3, [pc, #572]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b08      	cmp	r3, #8
 8001292:	d112      	bne.n	80012ba <HAL_RCC_OscConfig+0x5e>
 8001294:	4b8c      	ldr	r3, [pc, #560]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d10b      	bne.n	80012ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a2:	4b89      	ldr	r3, [pc, #548]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d06c      	beq.n	8001388 <HAL_RCC_OscConfig+0x12c>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d168      	bne.n	8001388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e24c      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c2:	d106      	bne.n	80012d2 <HAL_RCC_OscConfig+0x76>
 80012c4:	4b80      	ldr	r3, [pc, #512]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a7f      	ldr	r2, [pc, #508]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e02e      	b.n	8001330 <HAL_RCC_OscConfig+0xd4>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x98>
 80012da:	4b7b      	ldr	r3, [pc, #492]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7a      	ldr	r2, [pc, #488]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b78      	ldr	r3, [pc, #480]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a77      	ldr	r2, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e01d      	b.n	8001330 <HAL_RCC_OscConfig+0xd4>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0xbc>
 80012fe:	4b72      	ldr	r3, [pc, #456]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a71      	ldr	r2, [pc, #452]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b6f      	ldr	r3, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6e      	ldr	r2, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e00b      	b.n	8001330 <HAL_RCC_OscConfig+0xd4>
 8001318:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a6a      	ldr	r2, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800131e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a67      	ldr	r2, [pc, #412]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800132a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fcdc 	bl	8000cf4 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fcd8 	bl	8000cf4 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e200      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0xe4>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fcc8 	bl	8000cf4 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fcc4 	bl	8000cf4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1ec      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x10c>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d063      	beq.n	800145e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001396:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d11c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x18c>
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d116      	bne.n	80013e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <HAL_RCC_OscConfig+0x176>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e1c0      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4939      	ldr	r1, [pc, #228]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	e03a      	b.n	800145e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc7d 	bl	8000cf4 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc79 	bl	8000cf4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e1a1      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4927      	ldr	r1, [pc, #156]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e015      	b.n	800145e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_RCC_OscConfig+0x270>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fc5c 	bl	8000cf4 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff fc58 	bl	8000cf4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e180      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d03a      	beq.n	80014e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d019      	beq.n	80014a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_RCC_OscConfig+0x274>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff fc3c 	bl	8000cf4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fc38 	bl	8000cf4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e160      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f000 fa9c 	bl	80019dc <RCC_Delay>
 80014a4:	e01c      	b.n	80014e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_RCC_OscConfig+0x274>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fc22 	bl	8000cf4 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b2:	e00f      	b.n	80014d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc1e 	bl	8000cf4 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d908      	bls.n	80014d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e146      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	42420000 	.word	0x42420000
 80014d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b92      	ldr	r3, [pc, #584]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e9      	bne.n	80014b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a6 	beq.w	800163a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b8b      	ldr	r3, [pc, #556]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10d      	bne.n	800151a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b88      	ldr	r3, [pc, #544]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a87      	ldr	r2, [pc, #540]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b85      	ldr	r3, [pc, #532]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4b82      	ldr	r3, [pc, #520]	; (8001724 <HAL_RCC_OscConfig+0x4c8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d118      	bne.n	8001558 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001526:	4b7f      	ldr	r3, [pc, #508]	; (8001724 <HAL_RCC_OscConfig+0x4c8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a7e      	ldr	r2, [pc, #504]	; (8001724 <HAL_RCC_OscConfig+0x4c8>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff fbdf 	bl	8000cf4 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153a:	f7ff fbdb 	bl	8000cf4 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b64      	cmp	r3, #100	; 0x64
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e103      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	4b75      	ldr	r3, [pc, #468]	; (8001724 <HAL_RCC_OscConfig+0x4c8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x312>
 8001560:	4b6f      	ldr	r3, [pc, #444]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a6e      	ldr	r2, [pc, #440]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	e02d      	b.n	80015ca <HAL_RCC_OscConfig+0x36e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x334>
 8001576:	4b6a      	ldr	r3, [pc, #424]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a69      	ldr	r2, [pc, #420]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	4b67      	ldr	r3, [pc, #412]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4a66      	ldr	r2, [pc, #408]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	f023 0304 	bic.w	r3, r3, #4
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	e01c      	b.n	80015ca <HAL_RCC_OscConfig+0x36e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x356>
 8001598:	4b61      	ldr	r3, [pc, #388]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a60      	ldr	r2, [pc, #384]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	4b5e      	ldr	r3, [pc, #376]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a5d      	ldr	r2, [pc, #372]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	e00b      	b.n	80015ca <HAL_RCC_OscConfig+0x36e>
 80015b2:	4b5b      	ldr	r3, [pc, #364]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a5a      	ldr	r2, [pc, #360]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	4b58      	ldr	r3, [pc, #352]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a57      	ldr	r2, [pc, #348]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d015      	beq.n	80015fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fb8f 	bl	8000cf4 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff fb8b 	bl	8000cf4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0b1      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0ee      	beq.n	80015da <HAL_RCC_OscConfig+0x37e>
 80015fc:	e014      	b.n	8001628 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fb79 	bl	8000cf4 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fb75 	bl	8000cf4 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e09b      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	4b40      	ldr	r3, [pc, #256]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ee      	bne.n	8001606 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d105      	bne.n	800163a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162e:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a3b      	ldr	r2, [pc, #236]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8087 	beq.w	8001752 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d061      	beq.n	8001714 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d146      	bne.n	80016e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_RCC_OscConfig+0x4cc>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fb49 	bl	8000cf4 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fb45 	bl	8000cf4 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e06d      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001678:	4b29      	ldr	r3, [pc, #164]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d108      	bne.n	80016a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4921      	ldr	r1, [pc, #132]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a19      	ldr	r1, [r3, #32]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	430b      	orrs	r3, r1
 80016b2:	491b      	ldr	r1, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x4cc>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff fb19 	bl	8000cf4 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff fb15 	bl	8000cf4 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e03d      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x46a>
 80016e4:	e035      	b.n	8001752 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_RCC_OscConfig+0x4cc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fb02 	bl	8000cf4 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fafe 	bl	8000cf4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e026      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x498>
 8001712:	e01e      	b.n	8001752 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d107      	bne.n	800172c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e019      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
 8001720:	40021000 	.word	0x40021000
 8001724:	40007000 	.word	0x40007000
 8001728:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_OscConfig+0x500>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	429a      	cmp	r2, r3
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0d0      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d910      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 0207 	bic.w	r2, r3, #7
 800178a:	4965      	ldr	r1, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d040      	beq.n	8001880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d115      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e073      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06b      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4936      	ldr	r1, [pc, #216]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001850:	f7ff fa50 	bl	8000cf4 <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff fa4c 	bl	8000cf4 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e053      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d210      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 0207 	bic.w	r2, r3, #7
 8001896:	4922      	ldr	r1, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1cc>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1d0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f9ae 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40022000 	.word	0x40022000
 8001924:	40021000 	.word	0x40021000
 8001928:	08002380 	.word	0x08002380
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800194e:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b04      	cmp	r3, #4
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x30>
 800195e:	2b08      	cmp	r3, #8
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x36>
 8001962:	e027      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001966:	613b      	str	r3, [r7, #16]
      break;
 8001968:	e027      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	0c9b      	lsrs	r3, r3, #18
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d010      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	0c5b      	lsrs	r3, r3, #17
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001996:	fb03 f202 	mul.w	r2, r3, r2
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e004      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	613b      	str	r3, [r7, #16]
      break;
 80019b2:	e002      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetSysClockFreq+0x98>)
 80019b6:	613b      	str	r3, [r7, #16]
      break;
 80019b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ba:	693b      	ldr	r3, [r7, #16]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	08002390 	.word	0x08002390
 80019d4:	080023a0 	.word	0x080023a0
 80019d8:	003d0900 	.word	0x003d0900

080019dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <RCC_Delay+0x34>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <RCC_Delay+0x38>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0a5b      	lsrs	r3, r3, #9
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019f8:	bf00      	nop
  }
  while (Delay --);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	60fa      	str	r2, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f9      	bne.n	80019f8 <RCC_Delay+0x1c>
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000000 	.word	0x20000000
 8001a14:	10624dd3 	.word	0x10624dd3

08001a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e041      	b.n	8001aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff f87e 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3304      	adds	r3, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f000 fa74 	bl	8001f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d001      	beq.n	8001ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e03a      	b.n	8001b46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <HAL_TIM_Base_Start_IT+0x98>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00e      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x58>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afa:	d009      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x58>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d004      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x58>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d111      	bne.n	8001b34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d010      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b32:	e007      	b.n	8001b44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40000800 	.word	0x40000800

08001b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d122      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d11b      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 0202 	mvn.w	r2, #2
 8001b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f9b4 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001ba4:	e005      	b.n	8001bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f9a7 	bl	8001efa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f9b6 	bl	8001f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d122      	bne.n	8001c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d11b      	bne.n	8001c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0204 	mvn.w	r2, #4
 8001bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f98a 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001bf8:	e005      	b.n	8001c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f97d 	bl	8001efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f98c 	bl	8001f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d122      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d11b      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0208 	mvn.w	r2, #8
 8001c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2204      	movs	r2, #4
 8001c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f960 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001c4c:	e005      	b.n	8001c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f953 	bl	8001efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f962 	bl	8001f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b10      	cmp	r3, #16
 8001c6c:	d122      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d11b      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0210 	mvn.w	r2, #16
 8001c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2208      	movs	r2, #8
 8001c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f936 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001ca0:	e005      	b.n	8001cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f929 	bl	8001efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f938 	bl	8001f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d107      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0201 	mvn.w	r2, #1
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fed2 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	2b80      	cmp	r3, #128	; 0x80
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf8:	2b80      	cmp	r3, #128	; 0x80
 8001cfa:	d107      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fa7b 	bl	8002202 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d16:	2b40      	cmp	r3, #64	; 0x40
 8001d18:	d10e      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d24:	2b40      	cmp	r3, #64	; 0x40
 8001d26:	d107      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8fc 	bl	8001f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d10e      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d107      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0220 	mvn.w	r2, #32
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fa46 	bl	80021f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_TIM_ConfigClockSource+0x1c>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e0b4      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x186>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc0:	d03e      	beq.n	8001e40 <HAL_TIM_ConfigClockSource+0xd4>
 8001dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc6:	f200 8087 	bhi.w	8001ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dce:	f000 8086 	beq.w	8001ede <HAL_TIM_ConfigClockSource+0x172>
 8001dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd6:	d87f      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd8:	2b70      	cmp	r3, #112	; 0x70
 8001dda:	d01a      	beq.n	8001e12 <HAL_TIM_ConfigClockSource+0xa6>
 8001ddc:	2b70      	cmp	r3, #112	; 0x70
 8001dde:	d87b      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8001de0:	2b60      	cmp	r3, #96	; 0x60
 8001de2:	d050      	beq.n	8001e86 <HAL_TIM_ConfigClockSource+0x11a>
 8001de4:	2b60      	cmp	r3, #96	; 0x60
 8001de6:	d877      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8001de8:	2b50      	cmp	r3, #80	; 0x50
 8001dea:	d03c      	beq.n	8001e66 <HAL_TIM_ConfigClockSource+0xfa>
 8001dec:	2b50      	cmp	r3, #80	; 0x50
 8001dee:	d873      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8001df0:	2b40      	cmp	r3, #64	; 0x40
 8001df2:	d058      	beq.n	8001ea6 <HAL_TIM_ConfigClockSource+0x13a>
 8001df4:	2b40      	cmp	r3, #64	; 0x40
 8001df6:	d86f      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8001df8:	2b30      	cmp	r3, #48	; 0x30
 8001dfa:	d064      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8001dfc:	2b30      	cmp	r3, #48	; 0x30
 8001dfe:	d86b      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d060      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d867      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d05c      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d05a      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8001e10:	e062      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e22:	f000 f968 	bl	80020f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	609a      	str	r2, [r3, #8]
      break;
 8001e3e:	e04f      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e50:	f000 f951 	bl	80020f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e62:	609a      	str	r2, [r3, #8]
      break;
 8001e64:	e03c      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e72:	461a      	mov	r2, r3
 8001e74:	f000 f8c8 	bl	8002008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2150      	movs	r1, #80	; 0x50
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f91f 	bl	80020c2 <TIM_ITRx_SetConfig>
      break;
 8001e84:	e02c      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e92:	461a      	mov	r2, r3
 8001e94:	f000 f8e6 	bl	8002064 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2160      	movs	r1, #96	; 0x60
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f90f 	bl	80020c2 <TIM_ITRx_SetConfig>
      break;
 8001ea4:	e01c      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f000 f8a8 	bl	8002008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2140      	movs	r1, #64	; 0x40
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f8ff 	bl	80020c2 <TIM_ITRx_SetConfig>
      break;
 8001ec4:	e00c      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f000 f8f6 	bl	80020c2 <TIM_ITRx_SetConfig>
      break;
 8001ed6:	e003      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
      break;
 8001edc:	e000      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ede:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
	...

08001f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <TIM_Base_SetConfig+0xb8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00b      	beq.n	8001f74 <TIM_Base_SetConfig+0x30>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f62:	d007      	beq.n	8001f74 <TIM_Base_SetConfig+0x30>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a26      	ldr	r2, [pc, #152]	; (8002000 <TIM_Base_SetConfig+0xbc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <TIM_Base_SetConfig+0x30>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a25      	ldr	r2, [pc, #148]	; (8002004 <TIM_Base_SetConfig+0xc0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d108      	bne.n	8001f86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <TIM_Base_SetConfig+0xb8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x62>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0x62>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <TIM_Base_SetConfig+0xbc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0x62>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a18      	ldr	r2, [pc, #96]	; (8002004 <TIM_Base_SetConfig+0xc0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <TIM_Base_SetConfig+0xb8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d103      	bne.n	8001fec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	615a      	str	r2, [r3, #20]
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40012c00 	.word	0x40012c00
 8002000:	40000400 	.word	0x40000400
 8002004:	40000800 	.word	0x40000800

08002008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	f023 0201 	bic.w	r2, r3, #1
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f023 030a 	bic.w	r3, r3, #10
 8002044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	621a      	str	r2, [r3, #32]
}
 800205a:	bf00      	nop
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	f023 0210 	bic.w	r2, r3, #16
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800208e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	031b      	lsls	r3, r3, #12
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	621a      	str	r2, [r3, #32]
}
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	f043 0307 	orr.w	r3, r3, #7
 80020e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	609a      	str	r2, [r3, #8]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b087      	sub	sp, #28
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002110:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	431a      	orrs	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4313      	orrs	r3, r2
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	609a      	str	r2, [r3, #8]
}
 800212a:	bf00      	nop
 800212c:	371c      	adds	r7, #28
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002148:	2302      	movs	r3, #2
 800214a:	e046      	b.n	80021da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00e      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d009      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a10      	ldr	r2, [pc, #64]	; (80021ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10c      	bne.n	80021c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40012c00 	.word	0x40012c00
 80021e8:	40000400 	.word	0x40000400
 80021ec:	40000800 	.word	0x40000800

080021f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <memset>:
 8002214:	4603      	mov	r3, r0
 8002216:	4402      	add	r2, r0
 8002218:	4293      	cmp	r3, r2
 800221a:	d100      	bne.n	800221e <memset+0xa>
 800221c:	4770      	bx	lr
 800221e:	f803 1b01 	strb.w	r1, [r3], #1
 8002222:	e7f9      	b.n	8002218 <memset+0x4>

08002224 <__libc_init_array>:
 8002224:	b570      	push	{r4, r5, r6, lr}
 8002226:	2600      	movs	r6, #0
 8002228:	4d0c      	ldr	r5, [pc, #48]	; (800225c <__libc_init_array+0x38>)
 800222a:	4c0d      	ldr	r4, [pc, #52]	; (8002260 <__libc_init_array+0x3c>)
 800222c:	1b64      	subs	r4, r4, r5
 800222e:	10a4      	asrs	r4, r4, #2
 8002230:	42a6      	cmp	r6, r4
 8002232:	d109      	bne.n	8002248 <__libc_init_array+0x24>
 8002234:	f000 f828 	bl	8002288 <_init>
 8002238:	2600      	movs	r6, #0
 800223a:	4d0a      	ldr	r5, [pc, #40]	; (8002264 <__libc_init_array+0x40>)
 800223c:	4c0a      	ldr	r4, [pc, #40]	; (8002268 <__libc_init_array+0x44>)
 800223e:	1b64      	subs	r4, r4, r5
 8002240:	10a4      	asrs	r4, r4, #2
 8002242:	42a6      	cmp	r6, r4
 8002244:	d105      	bne.n	8002252 <__libc_init_array+0x2e>
 8002246:	bd70      	pop	{r4, r5, r6, pc}
 8002248:	f855 3b04 	ldr.w	r3, [r5], #4
 800224c:	4798      	blx	r3
 800224e:	3601      	adds	r6, #1
 8002250:	e7ee      	b.n	8002230 <__libc_init_array+0xc>
 8002252:	f855 3b04 	ldr.w	r3, [r5], #4
 8002256:	4798      	blx	r3
 8002258:	3601      	adds	r6, #1
 800225a:	e7f2      	b.n	8002242 <__libc_init_array+0x1e>
 800225c:	080023a4 	.word	0x080023a4
 8002260:	080023a4 	.word	0x080023a4
 8002264:	080023a4 	.word	0x080023a4
 8002268:	080023a8 	.word	0x080023a8

0800226c <memcpy>:
 800226c:	440a      	add	r2, r1
 800226e:	4291      	cmp	r1, r2
 8002270:	f100 33ff 	add.w	r3, r0, #4294967295
 8002274:	d100      	bne.n	8002278 <memcpy+0xc>
 8002276:	4770      	bx	lr
 8002278:	b510      	push	{r4, lr}
 800227a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800227e:	4291      	cmp	r1, r2
 8002280:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002284:	d1f9      	bne.n	800227a <memcpy+0xe>
 8002286:	bd10      	pop	{r4, pc}

08002288 <_init>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	bf00      	nop
 800228c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228e:	bc08      	pop	{r3}
 8002290:	469e      	mov	lr, r3
 8002292:	4770      	bx	lr

08002294 <_fini>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr
